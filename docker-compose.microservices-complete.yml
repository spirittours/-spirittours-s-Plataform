# Complete Microservices Architecture for Spirit Tours
# Production-ready configuration with all services

version: '3.8'

networks:
  spirit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  postgres_backup:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  mongodb_data:
  clickhouse_data:
  grafana_data:
  prometheus_data:
  kong_data:

services:
  # ============================================
  # API GATEWAY & LOAD BALANCER
  # ============================================
  
  kong:
    image: kong:3.4-alpine
    container_name: spirit-kong
    networks:
      - spirit-network
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml
      - kong_data:/var/lib/kong
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - quotation-service
      - booking-service
      - guide-service

  nginx:
    image: nginx:alpine
    container_name: spirit-nginx
    networks:
      - spirit-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - kong
    restart: unless-stopped

  # ============================================
  # CORE MICROSERVICES
  # ============================================

  quotation-service:
    build:
      context: ./backend
      dockerfile: services/quotation/Dockerfile
    container_name: spirit-quotation
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: quotation-service
      SERVICE_PORT: 8010
      DATABASE_URL: postgresql://spirit:spirit123@postgres:5432/spirittours_quotations
      REDIS_URL: redis://redis:6379/0
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
    ports:
      - "8010:8010"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  booking-service:
    build:
      context: ./backend
      dockerfile: services/booking/Dockerfile
    container_name: spirit-booking
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: booking-service
      SERVICE_PORT: 8011
      DATABASE_URL: postgresql://spirit:spirit123@postgres:5432/spirittours_bookings
      REDIS_URL: redis://redis:6379/1
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8011:8011"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  guide-service:
    build:
      context: ./backend
      dockerfile: services/guide/Dockerfile
    container_name: spirit-guide
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: guide-service
      SERVICE_PORT: 8012
      DATABASE_URL: postgresql://spirit:spirit123@postgres:5432/spirittours_guides
      REDIS_URL: redis://redis:6379/2
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    ports:
      - "8012:8012"
    deploy:
      replicas: 2
    depends_on:
      - postgres
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s

  hotel-service:
    build:
      context: ./backend
      dockerfile: services/hotel/Dockerfile
    container_name: spirit-hotel
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: hotel-service
      SERVICE_PORT: 8013
      DATABASE_URL: postgresql://spirit:spirit123@postgres:5432/spirittours_hotels
      REDIS_URL: redis://redis:6379/3
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    ports:
      - "8013:8013"
    deploy:
      replicas: 2
    depends_on:
      - postgres
      - redis
      - rabbitmq

  transport-service:
    build:
      context: ./backend
      dockerfile: services/transport/Dockerfile
    container_name: spirit-transport
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: transport-service
      SERVICE_PORT: 8014
      DATABASE_URL: postgresql://spirit:spirit123@postgres:5432/spirittours_transport
      REDIS_URL: redis://redis:6379/4
    ports:
      - "8014:8014"
    deploy:
      replicas: 2
    depends_on:
      - postgres
      - redis

  # ============================================
  # SUPPORT MICROSERVICES
  # ============================================

  notification-service:
    build:
      context: ./backend
      dockerfile: services/notification/Dockerfile
    container_name: spirit-notification
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: notification-service
      SERVICE_PORT: 8015
      REDIS_URL: redis://redis:6379/5
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
    ports:
      - "8015:8015"
    deploy:
      replicas: 2
    depends_on:
      - redis
      - rabbitmq

  payment-service:
    build:
      context: ./backend
      dockerfile: services/payment/Dockerfile
    container_name: spirit-payment
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: payment-service
      SERVICE_PORT: 8016
      DATABASE_URL: postgresql://spirit:spirit123@postgres:5432/spirittours_payments
      REDIS_URL: redis://redis:6379/6
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      MERCADOPAGO_ACCESS_TOKEN: ${MERCADOPAGO_ACCESS_TOKEN}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
    ports:
      - "8016:8016"
    deploy:
      replicas: 2
    depends_on:
      - postgres
      - redis

  analytics-service:
    build:
      context: ./backend
      dockerfile: services/analytics/Dockerfile
    container_name: spirit-analytics
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: analytics-service
      SERVICE_PORT: 8017
      DATABASE_URL: postgresql://spirit:spirit123@postgres:5432/spirittours_analytics
      CLICKHOUSE_URL: clickhouse://default:@clickhouse:8123/spirit
      REDIS_URL: redis://redis:6379/7
    ports:
      - "8017:8017"
    depends_on:
      - postgres
      - clickhouse
      - redis

  ml-service:
    build:
      context: ./backend
      dockerfile: services/ml/Dockerfile
    container_name: spirit-ml
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: ml-service
      SERVICE_PORT: 8018
      DATABASE_URL: postgresql://spirit:spirit123@postgres:5432/spirittours_ml
      REDIS_URL: redis://redis:6379/8
      MODEL_PATH: /app/models
    ports:
      - "8018:8018"
    volumes:
      - ./models:/app/models
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2'
          memory: 4G
    depends_on:
      - postgres
      - redis

  websocket-service:
    build:
      context: ./backend
      dockerfile: services/websocket/Dockerfile
    container_name: spirit-websocket
    networks:
      - spirit-network
    environment:
      SERVICE_NAME: websocket-service
      SERVICE_PORT: 8019
      REDIS_URL: redis://redis:6379/9
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8019:8019"
    deploy:
      replicas: 2
    depends_on:
      - redis

  # ============================================
  # DATA LAYER
  # ============================================

  postgres:
    image: postgres:15-alpine
    container_name: spirit-postgres
    networks:
      - spirit-network
    environment:
      POSTGRES_USER: spirit
      POSTGRES_PASSWORD: spirit123
      POSTGRES_MULTIPLE_DATABASES: spirittours_quotations,spirittours_bookings,spirittours_guides,spirittours_hotels,spirittours_transport,spirittours_payments,spirittours_analytics,spirittours_ml
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backup
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spirit"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-replica:
    image: postgres:15-alpine
    container_name: spirit-postgres-replica
    networks:
      - spirit-network
    environment:
      POSTGRES_USER: spirit
      POSTGRES_PASSWORD: spirit123
      POSTGRES_MASTER_SERVICE: postgres
    ports:
      - "5433:5432"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: spirit-redis
    networks:
      - spirit-network
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis-replica:
    image: redis:7-alpine
    container_name: spirit-redis-replica
    networks:
      - spirit-network
    command: redis-server --replicaof redis 6379
    ports:
      - "6380:6379"
    depends_on:
      - redis
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: spirit-rabbitmq
    networks:
      - spirit-network
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    container_name: spirit-mongodb
    networks:
      - spirit-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: spirit
      MONGO_INITDB_ROOT_PASSWORD: spirit123
      MONGO_INITDB_DATABASE: spirittours
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: spirit-elasticsearch
    networks:
      - spirit-network
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"[green|yellow]\"'"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: spirit-clickhouse
    networks:
      - spirit-network
    environment:
      CLICKHOUSE_DB: spirit
      CLICKHOUSE_USER: spirit
      CLICKHOUSE_PASSWORD: spirit123
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native protocol
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
    restart: unless-stopped

  # ============================================
  # MONITORING & OBSERVABILITY
  # ============================================

  prometheus:
    image: prom/prometheus:latest
    container_name: spirit-prometheus
    networks:
      - spirit-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - cadvisor
      - node-exporter
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: spirit-grafana
    networks:
      - spirit-network
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: spirit-jaeger
    networks:
      - spirit-network
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: spirit-loki
    networks:
      - spirit-network
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: spirit-promtail
    networks:
      - spirit-network
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail/promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: spirit-cadvisor
    networks:
      - spirit-network
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: spirit-node-exporter
    networks:
      - spirit-network
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # ============================================
  # DEVELOPMENT TOOLS
  # ============================================

  adminer:
    image: adminer:latest
    container_name: spirit-adminer
    networks:
      - spirit-network
    ports:
      - "8090:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    restart: unless-stopped

  redisinsight:
    image: redis/redisinsight:latest
    container_name: spirit-redisinsight
    networks:
      - spirit-network
    ports:
      - "8091:5540"
    volumes:
      - ./redisinsight:/data
    depends_on:
      - redis
    restart: unless-stopped

  # ============================================
  # SERVICE MESH & DISCOVERY
  # ============================================

  consul:
    image: consul:latest
    container_name: spirit-consul
    networks:
      - spirit-network
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    ports:
      - "8500:8500"  # UI and API
      - "8600:8600"  # DNS
    volumes:
      - ./consul/config:/consul/config
    restart: unless-stopped

  # ============================================
  # BACKUP SERVICE
  # ============================================

  backup:
    image: postgres:15-alpine
    container_name: spirit-backup
    networks:
      - spirit-network
    environment:
      PGPASSWORD: spirit123
    volumes:
      - postgres_backup:/backup
      - ./scripts/backup.sh:/backup.sh
    command: /bin/sh -c "while true; do /backup.sh; sleep 86400; done"
    depends_on:
      - postgres
    restart: unless-stopped

# Health check configuration for the entire stack
healthcheck:
  test: ["CMD", "docker-compose", "ps"]
  interval: 60s
  timeout: 10s
  retries: 3