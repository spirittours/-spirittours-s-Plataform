version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: spirit-postgres-staging
    environment:
      POSTGRES_USER: ${DB_USER:-spirit}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-spirit2024}
      POSTGRES_DB: ${DB_NAME:-spirit_tours_staging}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - spirit-network-staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-spirit}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: spirit-redis-staging
    ports:
      - "6380:6379"
    volumes:
      - redis_data_staging:/data
    networks:
      - spirit-network-staging
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-spirit2024}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: production
    container_name: spirit-backend-staging
    environment:
      ENV: staging
      DATABASE_URL: postgresql://${DB_USER:-spirit}:${DB_PASSWORD:-spirit2024}@postgres:5432/${DB_NAME:-spirit_tours_staging}
      REDIS_URL: redis://:${REDIS_PASSWORD:-spirit2024}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,https://staging.spirit-tours.com}
      
      # Twilio Configuration
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_WHATSAPP_NUMBER: ${TWILIO_WHATSAPP_NUMBER}
      
      # API Keys
      AMADEUS_API_KEY: ${AMADEUS_API_KEY}
      AMADEUS_API_SECRET: ${AMADEUS_API_SECRET}
      SABRE_API_KEY: ${SABRE_API_KEY}
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      
      # ML Configuration
      ENABLE_ML_PREDICTIONS: "true"
      ML_MODEL_PATH: /app/ml_models
      
      # WhatsApp NLP
      WHATSAPP_USE_NLP: ${WHATSAPP_USE_NLP:-false}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
    ports:
      - "8001:8000"
    volumes:
      - backend_uploads_staging:/app/uploads
      - backend_logs_staging:/app/logs
      - ml_models_staging:/app/ml_models
    networks:
      - spirit-network-staging
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://staging-api.spirit-tours.com}
        REACT_APP_ENV: staging
    container_name: spirit-frontend-staging
    ports:
      - "3001:80"
    networks:
      - spirit-network-staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: spirit-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/sites-enabled
      - ./ssl:/etc/nginx/ssl
      - nginx_logs_staging:/var/log/nginx
    networks:
      - spirit-network-staging
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: production
    container_name: spirit-celery-worker-staging
    command: celery -A backend.celery_app worker --loglevel=info --concurrency=4
    environment:
      ENV: staging
      DATABASE_URL: postgresql://${DB_USER:-spirit}:${DB_PASSWORD:-spirit2024}@postgres:5432/${DB_NAME:-spirit_tours_staging}
      REDIS_URL: redis://:${REDIS_PASSWORD:-spirit2024}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-spirit2024}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-spirit2024}@redis:6379/2
    volumes:
      - backend_logs_staging:/app/logs
    networks:
      - spirit-network-staging
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: production
    container_name: spirit-celery-beat-staging
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      ENV: staging
      DATABASE_URL: postgresql://${DB_USER:-spirit}:${DB_PASSWORD:-spirit2024}@postgres:5432/${DB_NAME:-spirit_tours_staging}
      REDIS_URL: redis://:${REDIS_PASSWORD:-spirit2024}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-spirit2024}@redis:6379/1
    volumes:
      - backend_logs_staging:/app/logs
    networks:
      - spirit-network-staging
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Flower - Celery Monitoring
  flower:
    image: mher/flower:latest
    container_name: spirit-flower-staging
    command: celery flower --broker=redis://:${REDIS_PASSWORD:-spirit2024}@redis:6379/1 --port=5555
    ports:
      - "5556:5555"
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-spirit2024}@redis:6379/1
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-spirit2024}
    networks:
      - spirit-network-staging
    depends_on:
      - redis
    restart: unless-stopped

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: spirit-prometheus-staging
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_staging:/prometheus
    networks:
      - spirit-network-staging
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: spirit-grafana-staging
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-spirit2024}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data_staging:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - spirit-network-staging
    depends_on:
      - prometheus
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: spirit-backup-staging
    environment:
      PGPASSWORD: ${DB_PASSWORD:-spirit2024}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - spirit-network-staging
    depends_on:
      - postgres
    entrypoint: ["/bin/sh", "-c"]
    command: ["chmod +x /backup.sh && crond -f -d 8"]

networks:
  spirit-network-staging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data_staging:
  redis_data_staging:
  backend_uploads_staging:
  backend_logs_staging:
  ml_models_staging:
  nginx_logs_staging:
  prometheus_data_staging:
  grafana_data_staging: