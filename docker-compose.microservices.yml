version: '3.8'

services:
  # ===========================================
  # FRONTEND APPLICATIONS
  # ===========================================
  
  frontend-main:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:8000
        - REACT_APP_WS_URL=ws://localhost:8000
    container_name: spirit-frontend-main
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_GATEWAY=http://api-gateway:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    networks:
      - spirit-network
    restart: unless-stopped

  frontend-admin:
    build:
      context: ./frontend
      dockerfile: Dockerfile.admin
      args:
        - REACT_APP_API_URL=http://localhost:8000
    container_name: spirit-frontend-admin
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_GATEWAY=http://api-gateway:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    networks:
      - spirit-network
    restart: unless-stopped

  frontend-provider:
    build:
      context: ./frontend
      dockerfile: Dockerfile.provider
      args:
        - REACT_APP_API_URL=http://localhost:8000
    container_name: spirit-frontend-provider
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_GATEWAY=http://api-gateway:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    networks:
      - spirit-network
    restart: unless-stopped

  # ===========================================
  # API GATEWAY
  # ===========================================
  
  api-gateway:
    image: kong:3.4-alpine
    container_name: spirit-api-gateway
    ports:
      - "8000:8000"    # Proxy port
      - "8001:8001"    # Admin API
      - "8443:8443"    # Proxy SSL port
      - "8444:8444"    # Admin SSL API
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
    volumes:
      - ./kong/declarative/kong.yml:/kong/declarative/kong.yml
      - ./kong/plugins:/usr/local/share/lua/5.1/kong/plugins
    depends_on:
      - postgres
      - kong-migration
    networks:
      - spirit-network
    restart: unless-stopped

  kong-migration:
    image: kong:3.4-alpine
    container_name: spirit-kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
      KONG_PG_DATABASE: kong
    depends_on:
      - postgres
    networks:
      - spirit-network
    restart: on-failure

  # ===========================================
  # MICROSERVICES
  # ===========================================
  
  quotation-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.quotation
    container_name: spirit-quotation-service
    ports:
      - "8011:8000"
    environment:
      - SERVICE_NAME=quotation-service
      - DATABASE_URL=postgresql://spirit:spirit123@postgres:5432/spirit_quotations
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - EVENT_BUS_ENABLED=true
      - CACHE_ENABLED=true
      - LOG_LEVEL=INFO
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here}
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  booking-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.booking
    container_name: spirit-booking-service
    ports:
      - "8012:8000"
    environment:
      - SERVICE_NAME=booking-service
      - DATABASE_URL=postgresql://spirit:spirit123@postgres:5432/spirit_bookings
      - REDIS_URL=redis://redis:6379/1
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - EVENT_BUS_ENABLED=true
      - CACHE_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  guide-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.guide
    container_name: spirit-guide-service
    ports:
      - "8013:8000"
    environment:
      - SERVICE_NAME=guide-service
      - DATABASE_URL=postgresql://spirit:spirit123@postgres:5432/spirit_guides
      - REDIS_URL=redis://redis:6379/2
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - EVENT_BUS_ENABLED=true
      - CACHE_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  provider-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.provider
    container_name: spirit-provider-service
    ports:
      - "8014:8000"
    environment:
      - SERVICE_NAME=provider-service
      - DATABASE_URL=postgresql://spirit:spirit123@postgres:5432/spirit_providers
      - REDIS_URL=redis://redis:6379/3
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - EVENT_BUS_ENABLED=true
      - CACHE_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  itinerary-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.itinerary
    container_name: spirit-itinerary-service
    ports:
      - "8015:8000"
    environment:
      - SERVICE_NAME=itinerary-service
      - DATABASE_URL=postgresql://spirit:spirit123@postgres:5432/spirit_itineraries
      - REDIS_URL=redis://redis:6379/4
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - EVENT_BUS_ENABLED=true
      - CACHE_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.notification
    container_name: spirit-notification-service
    ports:
      - "8016:8000"
    environment:
      - SERVICE_NAME=notification-service
      - REDIS_URL=redis://redis:6379/5
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMS_PROVIDER=twilio
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_NUMBER=${TWILIO_FROM_NUMBER}
      - EVENT_BUS_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - rabbitmq
    networks:
      - spirit-network
    restart: unless-stopped

  analytics-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.analytics
    container_name: spirit-analytics-service
    ports:
      - "8017:8000"
    environment:
      - SERVICE_NAME=analytics-service
      - DATABASE_URL=postgresql://spirit:spirit123@postgres:5432/spirit_analytics
      - CLICKHOUSE_URL=clickhouse://default:@clickhouse:8123
      - REDIS_URL=redis://redis:6379/6
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - EVENT_BUS_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - clickhouse
      - redis
      - rabbitmq
    networks:
      - spirit-network
    restart: unless-stopped

  payment-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.payment
    container_name: spirit-payment-service
    ports:
      - "8018:8000"
    environment:
      - SERVICE_NAME=payment-service
      - DATABASE_URL=postgresql://spirit:spirit123@postgres:5432/spirit_payments
      - REDIS_URL=redis://redis:6379/7
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - EVENT_BUS_ENABLED=true
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - spirit-network
    restart: unless-stopped

  # ===========================================
  # INFRASTRUCTURE SERVICES
  # ===========================================
  
  postgres:
    image: postgres:15-alpine
    container_name: spirit-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=spirit
      - POSTGRES_PASSWORD=spirit123
      - POSTGRES_MULTIPLE_DATABASES=spirit_quotations,spirit_bookings,spirit_guides,spirit_providers,spirit_itineraries,spirit_analytics,spirit_payments,kong
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/01-init-multiple-databases.sh
      - ./scripts/init-kong-db.sql:/docker-entrypoint-initdb.d/02-init-kong-db.sql
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spirit"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: spirit-redis
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfilename "appendonly.aof"
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: spirit-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - spirit-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: spirit-rabbitmq
    ports:
      - "5672:5672"      # AMQP port
      - "15672:15672"    # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: spirit-clickhouse
    ports:
      - "8123:8123"    # HTTP interface
      - "9000:9000"    # Native protocol port
      - "9004:9004"    # MySQL protocol port
    environment:
      - CLICKHOUSE_DB=spirit_analytics
      - CLICKHOUSE_USER=spirit
      - CLICKHOUSE_PASSWORD=spirit123
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.xml
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ===========================================
  # MONITORING & OBSERVABILITY
  # ===========================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: spirit-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    depends_on:
      - cadvisor
      - node-exporter
    networks:
      - spirit-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: spirit-grafana
    ports:
      - "3005:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=redis-datasource,clickhouse-datasource
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/spirit-overview.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - spirit-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: spirit-jaeger
    ports:
      - "5775:5775/udp"   # Zipkin/thrift compact
      - "6831:6831/udp"   # Jaeger thrift compact
      - "6832:6832/udp"   # Jaeger thrift binary
      - "5778:5778"       # Serve configs
      - "16686:16686"     # Jaeger UI
      - "14268:14268"     # Jaeger collector HTTP
      - "14250:14250"     # Jaeger collector gRPC
      - "9411:9411"       # Zipkin compatible endpoint
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - spirit-network
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: spirit-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - spirit-network
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: spirit-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - spirit-network
    restart: unless-stopped

  # ===========================================
  # DEVELOPMENT TOOLS
  # ===========================================
  
  adminer:
    image: adminer:latest
    container_name: spirit-adminer
    ports:
      - "8082:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      - postgres
    networks:
      - spirit-network
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:latest
    container_name: spirit-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - spirit-network
    restart: unless-stopped

  # ===========================================
  # NGINX REVERSE PROXY
  # ===========================================
  
  nginx:
    image: nginx:alpine
    container_name: spirit-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
      - ./nginx/static:/usr/share/nginx/html
    depends_on:
      - api-gateway
      - frontend-main
      - frontend-admin
      - frontend-provider
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===========================================
# VOLUMES
# ===========================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  clickhouse_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===========================================
# NETWORKS
# ===========================================

networks:
  spirit-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1