# ============================================
# Spirit Tours - Docker Compose Configuration
# ============================================
# Production-ready multi-container setup
# ============================================

version: '3.8'

services:
  # ==========================================
  # Frontend Service
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${API_URL:-http://localhost:8000/api}
        VITE_WS_URL: ${WS_URL:-ws://localhost:8000/ws}
        VITE_ENVIRONMENT: ${ENVIRONMENT:-production}
    container_name: spirit-tours-frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    labels:
      - "com.spirit-tours.service=frontend"
      - "com.spirit-tours.version=2.0.0"

  # ==========================================
  # Backend Service (Placeholder)
  # ==========================================
  backend:
    image: spirit-tours-backend:latest
    container_name: spirit-tours-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      - "com.spirit-tours.service=backend"

  # ==========================================
  # Database Service (PostgreSQL)
  # ==========================================
  database:
    image: postgres:15-alpine
    container_name: spirit-tours-database
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-spirittours}
      - POSTGRES_USER=${DB_USER:-spirittours}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-spirittours}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.spirit-tours.service=database"

  # ==========================================
  # Redis Cache
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: spirit-tours-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - spirit-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    labels:
      - "com.spirit-tours.service=redis"

  # ==========================================
  # Nginx Load Balancer (Optional)
  # ==========================================
  nginx-lb:
    image: nginx:alpine
    container_name: spirit-tours-nginx-lb
    ports:
      - "8080:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - spirit-network
    restart: unless-stopped
    labels:
      - "com.spirit-tours.service=load-balancer"

# ==========================================
# Networks
# ==========================================
networks:
  spirit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# ==========================================
# Volumes
# ==========================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
