version: '3.8'

services:
  # ==================== PostgreSQL Database ====================
  postgres:
    image: postgres:15-alpine
    container_name: spirit-tours-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: spirit_tours_db
      POSTGRES_USER: spirit_tours_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_password}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spirit_tours_user -d spirit_tours_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spirit-tours-network

  # ==================== Redis Cache ====================
  redis:
    image: redis:7-alpine
    container_name: spirit-tours-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-change_this_password} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - spirit-tours-network

  # ==================== MongoDB (Optional) ====================
  mongodb:
    image: mongo:6-focal
    container_name: spirit-tours-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-change_this_password}
      MONGO_INITDB_DATABASE: spirit_tours
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/spirit_tours --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spirit-tours-network

  # ==================== Spirit Tours API ====================
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spirit-tours-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: spirit_tours_db
      POSTGRES_USER: spirit_tours_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_password}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-change_this_password}
      
      # MongoDB
      MONGODB_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-change_this_password}@mongodb:27017
      MONGODB_DB_NAME: spirit_tours
      
      # AI Providers
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GROK_API_KEY: ${GROK_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # Payments
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      
      # WhatsApp
      WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
    ports:
      - "3001:3001"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - spirit-tours-network

  # ==================== Nginx Reverse Proxy ====================
  nginx:
    image: nginx:alpine
    container_name: spirit-tours-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./frontend/build:/usr/share/nginx/html:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api
    networks:
      - spirit-tours-network

  # ==================== Certbot for SSL ====================
  certbot:
    image: certbot/certbot
    container_name: spirit-tours-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - spirit-tours-network

# ==================== Volumes ====================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

# ==================== Networks ====================
networks:
  spirit-tours-network:
    driver: bridge
