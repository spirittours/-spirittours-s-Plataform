version: '3.8'

services:
  # FastAPI Backend
  backend:
    build: 
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://spirit_user:spirit_pass@postgres:5432/spirittours_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ../backend:/app
      - ../ai-agents:/app/ai-agents
    depends_on:
      - postgres
      - redis
    networks:
      - spirittours-network
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_SOCKET_URL=http://localhost:8000
    volumes:
      - ../frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - spirittours-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=spirittours_db
      - POSTGRES_USER=spirit_user
      - POSTGRES_PASSWORD=spirit_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spirittours-network
    restart: unless-stopped

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - spirittours-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # AI Agents Worker (Celery)
  ai-worker:
    build: 
      context: ../backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://spirit_user:spirit_pass@postgres:5432/spirittours_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ../backend:/app
      - ../ai-agents:/app/ai-agents
    depends_on:
      - postgres
      - redis
    networks:
      - spirittours-network
    restart: unless-stopped
    command: celery -A worker worker --loglevel=info

  # Celery Flower (Monitoring)
  flower:
    build: 
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../backend:/app
    depends_on:
      - redis
    networks:
      - spirittours-network
    restart: unless-stopped
    command: celery -A worker flower --port=5555

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ../docs:/usr/share/nginx/html/docs
    depends_on:
      - backend
      - frontend
    networks:
      - spirittours-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - spirittours-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - spirittours-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  spirittours-network:
    driver: bridge