# üß™ Staging Deployment - AI Multi-Model Management System
# Testing environment with reduced resources but production-like setup

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-multimodel-api
  namespace: staging
  labels:
    app: ai-multimodel-api
    tier: backend
    version: staging
    environment: staging
    app.kubernetes.io/name: ai-multimodel-system
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: genspark-ai-platform
    app.kubernetes.io/version: "2.0.0-staging"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-multimodel-api
      tier: backend
      environment: staging
  template:
    metadata:
      labels:
        app: ai-multimodel-api
        tier: backend
        version: staging
        environment: staging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ai-multimodel-service-account
      imagePullSecrets:
        - name: ai-multimodel-registry
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # üì¶ Init Container for migrations
      initContainers:
      - name: db-migration
        image: ghcr.io/genspark/ai-multimodel:IMAGE_TAG
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "üîÑ Running staging database migrations..."
            npm run migrate:staging
            echo "‚úÖ Staging migrations completed"
        envFrom:
          - configMapRef:
              name: ai-multimodel-staging-config
          - secretRef:
              name: ai-multimodel-staging-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
      
      containers:
      - name: ai-multimodel-api
        image: ghcr.io/genspark/ai-multimodel:IMAGE_TAG
        imagePullPolicy: Always
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: api
          containerPort: 3001
          protocol: TCP
        - name: websocket
          containerPort: 3002
          protocol: TCP
        
        envFrom:
          - configMapRef:
              name: ai-multimodel-staging-config
          - secretRef:
              name: ai-multimodel-staging-secrets
        
        env:
        - name: NODE_ENV
          value: "staging"
        - name: DEBUG_MODE
          value: "true"
        - name: LOG_LEVEL
          value: "debug"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        # üîç Health Checks (more lenient for staging)
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /startup
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
        
        # üìä Resource Management (reduced for staging)
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1"
            ephemeral-storage: "5Gi"
        
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: temp
          mountPath: /app/temp
        - name: config-volume
          mountPath: /app/config/staging
          readOnly: true
      
      # üìä Monitoring sidecar (optional for staging)
      - name: prometheus-exporter
        image: prom/node-exporter:latest
        ports:
        - name: metrics
          containerPort: 9100
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      
      volumes:
      - name: logs
        emptyDir:
          sizeLimit: 500Mi
      - name: temp
        emptyDir:
          sizeLimit: 500Mi
      - name: config-volume
        configMap:
          name: ai-multimodel-staging-config
      
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      
      nodeSelector:
        node-type: staging

---
# üåê Frontend Deployment for Staging
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-multimodel-frontend
  namespace: staging
  labels:
    app: ai-multimodel-frontend
    tier: frontend
    version: staging
    environment: staging
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-multimodel-frontend
      tier: frontend
      environment: staging
  template:
    metadata:
      labels:
        app: ai-multimodel-frontend
        tier: frontend
        version: staging
        environment: staging
    spec:
      imagePullSecrets:
        - name: ai-multimodel-registry
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
      
      containers:
      - name: nginx
        image: nginx:1.21-alpine
        ports:
        - containerPort: 80
        
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: frontend-assets
          mountPath: /usr/share/nginx/html
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      
      volumes:
      - name: nginx-config
        configMap:
          name: ai-multimodel-nginx-config
      - name: frontend-assets
        emptyDir:
          sizeLimit: 100Mi