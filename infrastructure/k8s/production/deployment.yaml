# üöÄ Production Deployment - AI Multi-Model Management System
# High-availability production configuration with auto-scaling

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-multimodel-api
  namespace: production
  labels:
    app: ai-multimodel-api
    tier: backend
    version: blue
    environment: production
    app.kubernetes.io/name: ai-multimodel-system
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: genspark-ai-platform
    app.kubernetes.io/version: "2.0.0"
  annotations:
    deployment.kubernetes.io/revision: "1"
    contact: "ai-team@genspark.ai"
    cost-center: "genspark-ai-production"
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: ai-multimodel-api
      tier: backend
      environment: production
  template:
    metadata:
      labels:
        app: ai-multimodel-api
        tier: backend
        version: blue
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ai-multimodel-service-account
      imagePullSecrets:
        - name: ai-multimodel-registry
      
      # üîê Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      
      # üì¶ Init Container for database migrations
      initContainers:
      - name: db-migration
        image: ghcr.io/genspark/ai-multimodel:IMAGE_TAG
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "üîÑ Running database migrations..."
            npm run migrate
            echo "‚úÖ Migrations completed"
        envFrom:
          - configMapRef:
              name: ai-multimodel-config
          - secretRef:
              name: ai-multimodel-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      
      # üèóÔ∏è Main Application Container
      containers:
      - name: ai-multimodel-api
        image: ghcr.io/genspark/ai-multimodel:IMAGE_TAG
        imagePullPolicy: Always
        
        # üîê Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        
        # üåê Ports
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: api
          containerPort: 3001
          protocol: TCP
        - name: websocket
          containerPort: 3002
          protocol: TCP
        
        # üîß Environment Variables
        envFrom:
          - configMapRef:
              name: ai-multimodel-config
          - secretRef:
              name: ai-multimodel-secrets
        
        env:
        - name: NODE_ENV
          value: "production"
        - name: CLUSTER_MODE
          value: "true"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        
        # üîç Health Checks
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /startup
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 20
          successThreshold: 1
        
        # üìä Resource Management
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
          limits:
            memory: "4Gi"
            cpu: "2"
            ephemeral-storage: "10Gi"
        
        # üíæ Volume Mounts
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: temp
          mountPath: /app/temp
        - name: uploads
          mountPath: /app/uploads
        - name: config-volume
          mountPath: /app/config/production
          readOnly: true
        - name: tls-certs
          mountPath: /app/certs
          readOnly: true
      
      # üìä Sidecar Container for Monitoring
      - name: prometheus-exporter
        image: prom/node-exporter:latest
        ports:
        - name: metrics
          containerPort: 9100
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      
      # üíæ Volumes
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: ai-multimodel-logs-pvc
      - name: temp
        emptyDir:
          sizeLimit: 1Gi
      - name: uploads
        persistentVolumeClaim:
          claimName: ai-multimodel-uploads-pvc
      - name: config-volume
        configMap:
          name: ai-multimodel-config
      - name: tls-certs
        secret:
          secretName: ai-multimodel-tls
      
      # üîÑ Pod Management
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      
      # üìç Node Selection
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: compute-optimized
      
      # üéØ Pod Anti-Affinity (spread across nodes)
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ai-multimodel-api
              topologyKey: kubernetes.io/hostname
      
      # üö´ Tolerations
      tolerations:
      - key: "node.kubernetes.io/high-memory"
        operator: "Exists"
        effect: "NoSchedule"

---
# üåê Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-multimodel-frontend
  namespace: production
  labels:
    app: ai-multimodel-frontend
    tier: frontend
    version: blue
    environment: production
    app.kubernetes.io/name: ai-multimodel-system
    app.kubernetes.io/component: frontend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-multimodel-frontend
      tier: frontend
      environment: production
  template:
    metadata:
      labels:
        app: ai-multimodel-frontend
        tier: frontend
        version: blue
        environment: production
    spec:
      imagePullSecrets:
        - name: ai-multimodel-registry
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
        runAsGroup: 101
      
      containers:
      - name: nginx
        image: nginx:1.21-alpine
        ports:
        - containerPort: 80
        
        # üîç Health Checks
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: frontend-assets
          mountPath: /usr/share/nginx/html
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      
      volumes:
      - name: nginx-config
        configMap:
          name: ai-multimodel-nginx-config
      - name: frontend-assets
        persistentVolumeClaim:
          claimName: ai-multimodel-frontend-pvc
      
      nodeSelector:
        node-type: frontend