version: '3.8'

# ============================================================================
# STAGING ENVIRONMENT CONFIGURATION
# ============================================================================
# Purpose: Staging deployment for testing before production
# Environment: Staging
# Resource Allocation: Reduced for cost efficiency
# Monitoring: Enabled with Prometheus + Grafana
# ============================================================================

services:
  # ==========================================================================
  # DATABASE SERVICE - PostgreSQL 15
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: staging_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-emailmarketing_staging}
      POSTGRES_USER: ${POSTGRES_USER:-emailuser_staging}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/init-database.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - staging_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-emailuser_staging} -d ${POSTGRES_DB:-emailmarketing_staging}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # ==========================================================================
  # CACHE SERVICE - Redis 7
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: staging_redis
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - staging_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # API SERVICE - FastAPI Backend
  # ==========================================================================
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: staging
    container_name: staging_api
    restart: unless-stopped
    environment:
      # Environment
      ENVIRONMENT: staging
      DEBUG: "false"
      LOG_LEVEL: info
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-emailuser_staging}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-emailmarketing_staging}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
      FROM_NAME: "Email Marketing - Staging"
      
      # API Configuration
      API_V1_PREFIX: /api/v1
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*}
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      
      # Rate Limiting
      RATE_LIMIT_PER_MINUTE: 100
      EMAIL_RATE_LIMIT: 50
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # OTA Configuration
      AIRBNB_CLIENT_ID: ${AIRBNB_CLIENT_ID}
      AIRBNB_CLIENT_SECRET: ${AIRBNB_CLIENT_SECRET}
      AGODA_API_KEY: ${AGODA_API_KEY}
      HOSTELWORLD_API_KEY: ${HOSTELWORLD_API_KEY}
    volumes:
      - ./backend:/app
      - api_logs:/app/logs
      - uploads:/app/uploads
    ports:
      - "8000:8000"
    networks:
      - staging_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "5"

  # ==========================================================================
  # EMAIL WORKER - Background Email Processing
  # ==========================================================================
  email_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: staging
    container_name: staging_email_worker
    restart: unless-stopped
    command: python -m email_marketing.worker
    environment:
      # Environment
      ENVIRONMENT: staging
      DEBUG: "false"
      LOG_LEVEL: info
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-emailuser_staging}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-emailmarketing_staging}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
      FROM_NAME: "Email Marketing - Staging"
      
      # Worker Configuration
      WORKER_CONCURRENCY: 5
      EMAIL_BATCH_SIZE: 50
      EMAIL_RATE_LIMIT: 50
      WORKER_RETRY_ATTEMPTS: 3
      WORKER_RETRY_DELAY: 60
    volumes:
      - ./backend:/app
      - worker_logs:/app/logs
    networks:
      - staging_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"

  # ==========================================================================
  # FRONTEND SERVICE - React + Nginx
  # ==========================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://staging.yourdomain.com/api}
        REACT_APP_ENVIRONMENT: staging
    container_name: staging_frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - frontend_logs:/var/log/nginx
    networks:
      - staging_network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"

  # ==========================================================================
  # MONITORING - Prometheus
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: staging_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - staging_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # VISUALIZATION - Grafana
  # ==========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: staging_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SERVER_ROOT_URL: http://staging.yourdomain.com/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - staging_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  staging_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/staging/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/staging/redis
  
  api_logs:
    driver: local
  
  worker_logs:
    driver: local
  
  frontend_logs:
    driver: local
  
  uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/staging/uploads
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
