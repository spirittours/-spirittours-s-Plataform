version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:14-3.3
    container_name: spirit-tours-db-staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: spirittours_staging
      POSTGRES_USER: spirittours_staging_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data-staging:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - spirit-tours-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spirittours_staging_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: spirit-tours-redis-staging
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - redis-data-staging:/data
    networks:
      - spirit-tours-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Backend API
  backend-api:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        NODE_ENV: staging
    container_name: spirit-tours-api-staging
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: spirittours_staging
      DB_USER: spirittours_staging_user
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - spirit-tours-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: https://staging-api.spirittours.com
        REACT_APP_ENV: staging
    container_name: spirit-tours-frontend-staging
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - spirit-tours-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: spirit-tours-nginx-staging
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend-api
      - frontend
    networks:
      - spirit-tours-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data-staging:
    driver: local
  redis-data-staging:
    driver: local

networks:
  spirit-tours-network:
    driver: bridge
